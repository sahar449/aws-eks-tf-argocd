name: CI-CD Full Pipeline

on:
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

env:
  aws_region: us-west-2
  terraform_version: 1.5.7
  image_tag: latest
  repo_name: eksdemo

jobs:
  ci_cd_pipeline:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.terraform_version }}

      - name: Configure AWS credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ env.aws_region }}
          role-session-name: github-actions

      - name: Terraform Apply ECR
        run: |
          terraform init -upgrade
          terraform apply -auto-approve -target=module.ecr

      - name: Login to ECR
        run: |
          aws ecr get-login-password --region ${{ env.aws_region }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_NUMBER }}.dkr.ecr.${{ env.aws_region }}.amazonaws.com

      - name: Build Docker Image
        run: |
          docker build -t ${{ secrets.AWS_ACCOUNT_NUMBER }}.dkr.ecr.${{ env.aws_region }}.amazonaws.com/${{ env.repo_name }}:${{ env.image_tag }} ./python-docker

      - name: Push Docker Image to ECR
        run: |
          docker push ${{ secrets.AWS_ACCOUNT_NUMBER }}.dkr.ecr.${{ env.aws_region }}.amazonaws.com/${{ env.repo_name }}:${{ env.image_tag }}
          
      - name: Terraform Apply Infrastructure
        run: |
          terraform apply -auto-approve

      - name: Helm Install ArgoCD
        run: |
          aws eks update-kubeconfig --region us-west-2 --name eksdemo-cluster
          helm repo add argo https://argoproj.github.io/argo-helm
          helm repo update
          helm upgrade --install argocd argo/argo-cd \
            --namespace argocd \
            --create-namespace \
            --set server.service.type=LoadBalancer \
            --set server.service.annotations."service\.beta\.kubernetes\.io/aws-load-balancer-type"="classic"
  
      - name: Clone repo and apply AppOfApps
        run: |
          git clone https://github.com/sahar449/aws-eks-tf-argocd.git
          sed -i "s|repository: .*|repository: ${AWS_ACCOUNT_NUMBER}.dkr.ecr.${AWS_REGION}.amazonaws.com/${REPO_NAME}|" ./chart-flask/values.yaml
          cd aws-eks-tf-argocd/argocd-apps
          kubectl apply -f appOfApps.yaml

  terraform_destroy_on_failure:
    needs: ci_cd_pipeline
    if: failure()
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.7

      - name: Configure AWS credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: us-west-2
          role-session-name: github-actions

      - name: Terraform Destroy (Step 1 - EKS)
        run: |
          terraform destroy -target=module.eks -auto-approve || true

      - name: Remove Security Groups from VPC
        run: |
          aws ec2 describe-security-groups --region us-west-2 \
            --query 'SecurityGroups[?GroupName!=`default`].GroupId' --output text | \
            xargs -r -n1 aws ec2 delete-security-group --region us-west-2 --group-id || true

      - name: Terraform Destroy (Step 2 - All Remaining)
        run: |
          terraform destroy -auto-approve || true
